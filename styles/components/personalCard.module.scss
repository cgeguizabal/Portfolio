.container {
  grid-column: col-start 1 / col-end 2;
  grid-row: row-start 1 / row-end 3;

  min-width: 25rem;

  border-radius: 2rem;

  /* Gradient - Almost transparent */
  background: rgba(20, 20, 20, 0.05);
  background: linear-gradient(
    135deg,
    rgba(84, 84, 84, 0.15) 0%,

    rgba(150, 149, 149, 0.1) 100%
  );
  backdrop-filter: blur(60px);
  /* Shadow that works with transparency */
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2),
    inset 0 0 0 1px rgba(255, 255, 255, 0.1); // Ultra-subtle inner glow

  /* Transition for smooth hover */
  transition: all 0.2s cubic-bezier(0.32, -0.01, 0.57, 0.95);

  display: flex;
  flex-direction: column;

  align-items: center;
  padding: 2rem;
  gap: 2rem;

  @media (max-width: $bp-medium) {
    grid-column: 2;
    grid-row: 2 / 5;
  }

  /* Hover State - Slight intensification */
  &:hover {
    background: linear-gradient(
      135deg,
      rgba(84, 84, 84, 0.1) 0%,
      rgba(150, 149, 149, 0.12) 100%
    );
    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.25),
      inset 0 0 15px 2px rgba(255, 255, 255, 0.1);
  }
}

.image {
  display: flex;
  justify-content: center;
  margin-top: 2rem;

  position: relative;
  width: 215px;
  height: 215px;
  @media (max-width: $bp-small) {
    width: 190px;
    height: 190px;
  }
  &_profile {
    width: 90%;
    height: 90%;
    position: relative;
    z-index: 1;

    top: 12px;
  }

  &_circle {
    width: 100%;
    height: 100%;
    position: absolute;
  }
}

.name {
  &_fullName {
    color: $light-gray;
    font-family: Dosis, sans-serif;
    font-weight: 700;
    letter-spacing: 0.2rem;
    text-align: center;
    font-size: 3rem;
  }
}

.specialization {
  background-color: $graphite;
  border: solid 0.5px $dark-gray;
  padding: 1.5rem 3rem;
  border-radius: 1rem;
  &_text {
    color: $light-gray;
    font-size: 1.4rem;
  }
}

.icons {
  display: flex;
  gap: 1rem;
  margin-top: 0.5rem;
  align-items: center;
  &_img {
    color: $light-gray;
    font-size: 1.4rem;

    &_container {
      background-color: $graphite;
      border: solid 0.5px $dark-gray;
      padding: 1.2rem 1.2rem;
      border-radius: 1rem;
      display: flex;
      align-items: center;

      &:hover {
        background-color: $dark-gray;
      }
    }
  }
}

.location {
  text-align: center;
  color: $light-gray;
  font-size: 1.6rem;
  line-height: 2.6rem;
  margin-top: 0.5rem;
}
// scroll-triggered.tsx
/*

import * as motion from "motion/react-client"
import type { Variants } from "motion/react"

export default function ScrollTriggered() {
    return (
        <div style={container}>
            {food.map(([emoji, hueA, hueB], i) => (
                <Card i={i} emoji={emoji} hueA={hueA} hueB={hueB} key={emoji} />
            ))}
        </div>
    )
}

interface CardProps {
    emoji: string
    hueA: number
    hueB: number
    i: number
}

function Card({ emoji, hueA, hueB, i }: CardProps) {
    const background = `linear-gradient(306deg, ${hue(hueA)}, ${hue(hueB)})`

    return (
        <motion.div
            className={`card-container-${i}`}
            style={cardContainer}
            initial="offscreen"
            whileInView="onscreen"
            viewport={{ amount: 0.8 }}
        >
            <div style={{ ...splash, background }} />
            <motion.div style={card} variants={cardVariants} className="card">
                {emoji}
            </motion.div>
        </motion.div>
    )
}

const cardVariants: Variants = {
    offscreen: {
        y: 300,
    },
    onscreen: {
        y: 50,
        rotate: -10,
        transition: {
            type: "spring",
            bounce: 0.4,
            duration: 0.8,
        },
    },
}

const hue = (h: number) => `hsl(${h}, 100%, 50%)`

/**
 * ==============   Styles   ================
 */

/*
const container: React.CSSProperties = {
    margin: "100px auto",
    maxWidth: 500,
    paddingBottom: 100,
    width: "100%",
}

const cardContainer: React.CSSProperties = {
    overflow: "hidden",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    position: "relative",
    paddingTop: 20,
    marginBottom: -120,
}

const splash: React.CSSProperties = {
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    clipPath: `path("M 0 303.5 C 0 292.454 8.995 285.101 20 283.5 L 460 219.5 C 470.085 218.033 480 228.454 480 239.5 L 500 430 C 500 441.046 491.046 450 480 450 L 20 450 C 8.954 450 0 441.046 0 430 Z")`,
}

const card: React.CSSProperties = {
    fontSize: 164,
    width: 300,
    height: 430,
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    borderRadius: 20,
    background: "#f5f5f5",
    boxShadow:
        "0 0 1px hsl(0deg 0% 0% / 0.075), 0 0 2px hsl(0deg 0% 0% / 0.075), 0 0 4px hsl(0deg 0% 0% / 0.075), 0 0 8px hsl(0deg 0% 0% / 0.075), 0 0 16px hsl(0deg 0% 0% / 0.075)",
    transformOrigin: "10% 60%",
}

/**
 * ==============   Data   ================
 */

/*
const food: [string, number, number][] = [
    ["üçÖ", 340, 10],
    ["üçä", 20, 40],
    ["üçã", 60, 90],
    ["üçê", 80, 120],
    ["üçè", 100, 140],
    ["ü´ê", 205, 245],
    ["üçÜ", 260, 290],
    ["üçá", 290, 320],
]

*/

// LoadingThreeDotsJumping.tsx
/*

"use client"

import { motion, Variants } from "motion/react"

function LoadingThreeDotsJumping() {
    const dotVariants: Variants = {
        jump: {
            y: -30,
            transition: {
                duration: 0.8,
                repeat: Infinity,
                repeatType: "mirror",
                ease: "easeInOut",
            },
        },
    }

    return (
        <motion.div
            animate="jump"
            transition={{ staggerChildren: -0.2, staggerDirection: -1 }}
            className="container"
        >
            <motion.div className="dot" variants={dotVariants} />
            <motion.div className="dot" variants={dotVariants} />
            <motion.div className="dot" variants={dotVariants} />
            <StyleSheet />
        </motion.div>
    )
}

/**
 * ==============   Styles   ================
 */
/*
function StyleSheet() {
    return (
        <style>
            {`
            .container {
                display: flex;
                justify-content: center;
                align-items: center;
                gap: 10px;
            }

            .dot {
                width: 20px;
                height: 20px;
                border-radius: 50%;
                background-color: #ff0088;
                will-change: transform;
            }
            `}
        </style>
    )
}

export default LoadingThreeDotsJumping
*/
